// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CongestionLevelType string

const (
	CongestionLevelTypeLow      CongestionLevelType = "low"
	CongestionLevelTypeModerate CongestionLevelType = "moderate"
	CongestionLevelTypeHigh     CongestionLevelType = "high"
)

func (e *CongestionLevelType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CongestionLevelType(s)
	case string:
		*e = CongestionLevelType(s)
	default:
		return fmt.Errorf("unsupported scan type for CongestionLevelType: %T", src)
	}
	return nil
}

type NullCongestionLevelType struct {
	CongestionLevelType CongestionLevelType `json:"congestion_level_type"`
	Valid               bool                `json:"valid"` // Valid is true if CongestionLevelType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCongestionLevelType) Scan(value interface{}) error {
	if value == nil {
		ns.CongestionLevelType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CongestionLevelType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCongestionLevelType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CongestionLevelType), nil
}

type Sensor struct {
	SensorID         int32       `json:"sensor_id"`
	Latitude         float64     `json:"latitude"`
	Longitude        float64     `json:"longitude"`
	TypeID           int32       `json:"type_id"`
	InstallationDate pgtype.Date `json:"installation_date"`
	Status           string      `json:"status"`
}

type SensorType struct {
	TypeID      int32       `json:"type_id"`
	TypeName    string      `json:"type_name"`
	Description pgtype.Text `json:"description"`
}

type TrafficDatum struct {
	SensorID        int32               `json:"sensor_id"`
	Timestamp       pgtype.Timestamp    `json:"timestamp"`
	TrafficVolume   int32               `json:"traffic_volume"`
	AverageSpeed    float64             `json:"average_speed"`
	CongestionLevel CongestionLevelType `json:"congestion_level"`
}
