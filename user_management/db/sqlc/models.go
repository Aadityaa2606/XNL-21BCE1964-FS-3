// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Services string

const (
	ServicesTrafficFlow         Services = "traffic_flow"
	ServicesAirQuality          Services = "air_quality"
	ServicesPowerConsumption    Services = "power_consumption"
	ServicesWaterLevels         Services = "water_levels"
	ServicesWasteManagement     Services = "waste_management"
	ServicesStructuralIntegrity Services = "structural_integrity"
)

func (e *Services) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Services(s)
	case string:
		*e = Services(s)
	default:
		return fmt.Errorf("unsupported scan type for Services: %T", src)
	}
	return nil
}

type NullServices struct {
	Services Services `json:"services"`
	Valid    bool     `json:"valid"` // Valid is true if Services is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServices) Scan(value interface{}) error {
	if value == nil {
		ns.Services, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Services.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServices) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Services), nil
}

type User struct {
	UserID       int32            `json:"user_id"`
	Username     string           `json:"username"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type UserContributedSensor struct {
	ContributionID  int32            `json:"contribution_id"`
	UserID          int32            `json:"user_id"`
	Service         Services         `json:"service"`
	ServiceSensorID int32            `json:"service_sensor_id"`
	ContributedAt   pgtype.Timestamp `json:"contributed_at"`
}
