// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sensor.sql

package db

import (
	"context"
)

const addUserContribution = `-- name: AddUserContribution :one
INSERT INTO user_contributed_sensors (
  user_id,
  service,
  service_sensor_id
) VALUES (
  $1, $2, $3
) RETURNING contribution_id, user_id, service, service_sensor_id, contributed_at
`

type AddUserContributionParams struct {
	UserID          int32    `json:"user_id"`
	Service         Services `json:"service"`
	ServiceSensorID int32    `json:"service_sensor_id"`
}

func (q *Queries) AddUserContribution(ctx context.Context, arg AddUserContributionParams) (UserContributedSensor, error) {
	row := q.db.QueryRow(ctx, addUserContribution, arg.UserID, arg.Service, arg.ServiceSensorID)
	var i UserContributedSensor
	err := row.Scan(
		&i.ContributionID,
		&i.UserID,
		&i.Service,
		&i.ServiceSensorID,
		&i.ContributedAt,
	)
	return i, err
}

const countUserContributions = `-- name: CountUserContributions :one
SELECT COUNT(*) FROM user_contributed_sensors
WHERE user_id = $1
`

func (q *Queries) CountUserContributions(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserContributions, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteUserContribution = `-- name: DeleteUserContribution :exec
DELETE FROM user_contributed_sensors
WHERE contribution_id = $1
`

func (q *Queries) DeleteUserContribution(ctx context.Context, contributionID int32) error {
	_, err := q.db.Exec(ctx, deleteUserContribution, contributionID)
	return err
}

const getTotalSensorCount = `-- name: GetTotalSensorCount :one
SELECT COUNT(*) FROM user_contributed_sensors
`

func (q *Queries) GetTotalSensorCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalSensorCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserContributions = `-- name: GetUserContributions :many
SELECT contribution_id, user_id, service, service_sensor_id, contributed_at FROM user_contributed_sensors
WHERE user_id = $1
ORDER BY contributed_at DESC
`

func (q *Queries) GetUserContributions(ctx context.Context, userID int32) ([]UserContributedSensor, error) {
	rows, err := q.db.Query(ctx, getUserContributions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserContributedSensor{}
	for rows.Next() {
		var i UserContributedSensor
		if err := rows.Scan(
			&i.ContributionID,
			&i.UserID,
			&i.Service,
			&i.ServiceSensorID,
			&i.ContributedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllSensors = `-- name: ListAllSensors :many
SELECT contribution_id, user_id, service, service_sensor_id, contributed_at FROM user_contributed_sensors
ORDER BY contributed_at DESC
LIMIT $1 OFFSET $2
`

type ListAllSensorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllSensors(ctx context.Context, arg ListAllSensorsParams) ([]UserContributedSensor, error) {
	rows, err := q.db.Query(ctx, listAllSensors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserContributedSensor{}
	for rows.Next() {
		var i UserContributedSensor
		if err := rows.Scan(
			&i.ContributionID,
			&i.UserID,
			&i.Service,
			&i.ServiceSensorID,
			&i.ContributedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
